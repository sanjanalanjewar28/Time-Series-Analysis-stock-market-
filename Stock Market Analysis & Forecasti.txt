# Stock Market Analysis & Forecasting Application

I'll help you create a comprehensive stock market analysis and forecasting application using Yahoo Finance data and Streamlit. Let's break this down into several files to organize the project properly.

## Project Structure

```
stock-market-forecasting/
├── app.py                 # Main Streamlit application
├── data_loader.py         # Functions to fetch data from Yahoo Finance
├── models.py              # Time series models (Prophet, LSTM)
├── visualization.py       # Data visualization functions
├── requirements.txt       # Project dependencies
└── README.md              # Project documentation
```

Let's create each file:

```python name=data_loader.py
import yfinance as yf
import pandas as pd

def load_stock_data(ticker, start_date, end_date):
    """
    Load stock data from Yahoo Finance
    
    Parameters:
    -----------
    ticker : str
        Stock ticker symbol (e.g., 'AAPL' for Apple)
    start_date : str
        Start date in 'YYYY-MM-DD' format
    end_date : str
        End date in 'YYYY-MM-DD' format
        
    Returns:
    --------
    pandas.DataFrame
        DataFrame containing stock data
    """
    try:
        data = yf.download(ticker, start=start_date, end=end_date)
        return data
    except Exception as e:
        print(f"Error loading data: {e}")
        return None
```

```python name=models.py
import pandas as pd
import numpy as np
from prophet import Prophet
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import matplotlib.pyplot as plt

def create_prophet_model(data, forecast_period=30):
    """
    Create and train a Prophet model for time series forecasting
    
    Parameters:
    -----------
    data : pandas.DataFrame
        DataFrame containing stock data with DatetimeIndex
    forecast_period : int
        Number of days to forecast
        
    Returns:
    --------
    tuple
        (Prophet model, forecast DataFrame)
    """
    # Prepare data for Prophet
    df_prophet = data.reset_index()
    df_prophet = df_prophet.rename(columns={'Date': 'ds', 'Close': 'y'})
    
    # Create and train Prophet model
    model = Prophet()
    model.fit(df_prophet)
    
    # Create future dataframe
    future = model.make_future_dataframe(periods=forecast_period)
    
    # Make predictions
    forecast = model.predict(future)
    
    return model, forecast

def create_lstm_model(data, target_column='Close', sequence_length=60, forecast_days=30, epochs=50, batch_size=32):
    """
    Create and train an LSTM model for time series forecasting
    
    Parameters:
    -----------
    data : pandas.DataFrame
        DataFrame containing stock data
    target_column : str
        Column to predict (default: 'Close')
    sequence_length : int
        Number of time steps to look back
    forecast_days : int
        Number of days to forecast
    epochs : int
        Number of training epochs
    batch_size : int
        Batch size for training
        
    Returns:
    --------
    tuple
        (LSTM model, predictions, future_predictions, scaler)
    """
    # Extract the target column and convert to numpy array
    dataset = data[target_column].values.reshape(-1, 1)
    
    # Scale the data
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(dataset)
    
    # Create sequences
    X, y = [], []
    for i in range(sequence_length, len(scaled_data)):
        X.append(scaled_data[i-sequence_length:i, 0])
        y.append(scaled_data[i, 0])
    
    X, y = np.array(X), np.array(y)
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))
    
    # Split data into train and test sets
    train_size = int(len(X) * 0.8)
    X_train, X_test = X[:train_size], X[train_size:]
    y_train, y_test = y[:train_size], y[train_size:]
    
    # Create LSTM model
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
    model.add(Dropout(0.2))
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dropout(0.2))
    model.add(Dense(units=1))
    
    # Compile and train the model
    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=1)
    
    # Make predictions
    predictions = model.predict(X_test)
    predictions = scaler.inverse_transform(predictions)
    
    # Forecast future values
    last_sequence = scaled_data[-sequence_length:].reshape(1, sequence_length, 1)
    future_predictions = []
    
    for _ in range(forecast_days):
        # Predict the next value
        next_pred = model.predict(last_sequence)[0][0]
        future_predictions.append(next_pred)
        
        # Update the sequence
        last_sequence = np.append(last_sequence[:, 1:, :], [[next_pred]], axis=1)
    
    # Inverse transform the predictions
    future_predictions = np.array(future_predictions).reshape(-1, 1)
    future_predictions = scaler.inverse_transform(future_predictions)
    
    return model, predictions, future_predictions, scaler
```

```python name=visualization.py
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objs as go
import pandas as pd
import numpy as np

def plot_stock_data(data, title='Stock Price History'):
    """
    Plot stock price history
    
    Parameters:
    -----------
    data : pandas.DataFrame
        DataFrame containing stock data with DatetimeIndex
    title : str
        Title for the plot
    
    Returns:
    --------
    matplotlib.figure.Figure
        Figure object for the plot
    """
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(data.index, data['Close'], label='Close Price')
    ax.set_title(title)
    ax.set_xlabel('Date')
    ax.set_ylabel('Price')
    ax.grid(True)
    ax.legend()
    
    return fig

def plot_prophet_forecast(model, forecast, data):
    """
    Plot Prophet forecast
    
    Parameters:
    -----------
    model : Prophet
        Trained Prophet model
    forecast : pandas.DataFrame
        Forecast DataFrame from Prophet
    data : pandas.DataFrame
        Original stock data
        
    Returns:
    --------
    tuple
        (Figure for components, Figure for forecast)
    """
    # Plot forecast components
    fig_components = model.plot_components(forecast)
    
    # Plot forecast
    fig_forecast = model.plot(forecast)
    
    # Add actual data points to the forecast plot
    ax = fig_forecast.gca()
    ax.plot(data.index, data['Close'], 'ko', alpha=0.3, label='Actual')
    ax.legend()
    
    return fig_components, fig_forecast

def plot_lstm_results(data, predictions, future_predictions, sequence_length, target_column='Close'):
    """
    Plot LSTM model results
    
    Parameters:
    -----------
    data : pandas.DataFrame
        Original stock data
    predictions : numpy.ndarray
        Model predictions on test data
    future_predictions : numpy.ndarray
        Future predictions
    sequence_length : int
        Number of time steps used for predictions
    target_column : str
        Target column used for predictions
        
    Returns:
    --------
    matplotlib.figure.Figure
        Figure object for the plot
    """
    # Create dates for future predictions
    last_date = data.index[-1]
    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=len(future_predictions))
    
    # Create figure
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # Plot training data
    train_size = int(len(data) * 0.8)
    ax.plot(data.index[:train_size], data[target_column][:train_size], label='Training Data')
    
    # Plot test data
    ax.plot(data.index[train_size:], data[target_column][train_size:], label='Test Data')
    
    # Plot predictions
    test_dates = data.index[train_size + sequence_length:]
    ax.plot(test_dates, predictions, label='LSTM Predictions', alpha=0.7)
    
    # Plot future predictions
    ax.plot(future_dates, future_predictions, label='Future Predictions', color='red')
    
    # Add labels and title
    ax.set_title('LSTM Model: Actual vs Predicted')
    ax.set_xlabel('Date')
    ax.set_ylabel('Price')
    ax.grid(True)
    ax.legend()
    
    return fig

def create_interactive_plot(data, prophet_forecast=None, lstm_predictions=None):
    """
    Create an interactive plot with Plotly
    
    Parameters:
    -----------
    data : pandas.DataFrame
        Original stock data
    prophet_forecast : pandas.DataFrame, optional
        Prophet forecast data
    lstm_predictions : tuple, optional
        (predictions, future_predictions, future_dates)
        
    Returns:
    --------
    plotly.graph_objects.Figure
        Interactive Plotly figure
    """
    fig = go.Figure()
    
    # Add trace for actual stock prices
    fig.add_trace(go.Scatter(
        x=data.index,
        y=data['Close'],
        mode='lines',
        name='Actual Close Price',
        line=dict(color='blue')
    ))
    
    # Add candlestick chart
    fig.add_trace(go.Candlestick(
        x=data.index,
        open=data['Open'],
        high=data['High'],
        low=data['Low'],
        close=data['Close'],
        name='OHLC',
        visible='legendonly'  # Hide by default
    ))
    
    # Add Prophet forecast if provided
    if prophet_forecast is not None:
        # Add trace for prophet forecast
        fig.add_trace(go.Scatter(
            x=prophet_forecast['ds'],
            y=prophet_forecast['yhat'],
            mode='lines',
            name='Prophet Forecast',
            line=dict(color='green')
        ))
        
        # Add upper and lower bounds
        fig.add_trace(go.Scatter(
            x=prophet_forecast['ds'],
            y=prophet_forecast['yhat_upper'],
            mode='lines',
            name='Prophet Upper Bound',
            line=dict(width=0),
            showlegend=False
        ))
        
        fig.add_trace(go.Scatter(
            x=prophet_forecast['ds'],
            y=prophet_forecast['yhat_lower'],
            mode='lines',
            name='Prophet Lower Bound',
            line=dict(width=0),
            fillcolor='rgba(0, 176, 0, 0.2)',
            fill='tonexty',
            showlegend=False
        ))
    
    # Add LSTM predictions if provided
    if lstm_predictions is not None:
        predictions, future_predictions, future_dates = lstm_predictions
        train_size = int(len(data) * 0.8)
        sequence_length = 60  # Default value, should be passed from the model
        
        # Add LSTM predictions on test data
        test_dates = data.index[train_size + sequence_length:]
        fig.add_trace(go.Scatter(
            x=test_dates,
            y=predictions.flatten(),
            mode='lines',
            name='LSTM Test Predictions',
            line=dict(color='orange')
        ))
        
        # Add LSTM future predictions
        fig.add_trace(go.Scatter(
            x=future_dates,
            y=future_predictions.flatten(),
            mode='lines',
            name='LSTM Future Forecast',
            line=dict(color='red')
        ))
    
    # Update layout
    fig.update_layout(
        title='Stock Price Analysis and Forecast',
        xaxis_title='Date',
        yaxis_title='Price',
        hovermode='x unified',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        template='plotly_white'
    )
    
    return fig
```

```python name=app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
from data_loader import load_stock_data
from models import create_prophet_model, create_lstm_model
from visualization import (
    plot_stock_data, 
    plot_prophet_forecast, 
    plot_lstm_results, 
    create_interactive_plot
)

def main():
    # Set page title
    st.set_page_config(
        page_title="Stock Market Analysis & Forecasting",
        page_icon="📈",
        layout="wide"
    )
    
    # Add header
    st.title("📈 Stock Market Analysis & Forecasting")
    st.write("""
    This application allows you to analyze and forecast stock market trends using time series analysis techniques.
    Select a stock symbol, date range, and forecasting model to get started.
    """)
    
    # Sidebar for inputs
    st.sidebar.header("Input Parameters")
    
    # Stock ticker input
    ticker = st.sidebar.text_input("Stock Symbol (e.g., AAPL, MSFT, GOOGL)", "AAPL")
    
    # Date range input
    today = datetime.datetime.now().date()
    five_years_ago = today - datetime.timedelta(days=5*365)
    
    start_date = st.sidebar.date_input("Start Date", five_years_ago)
    end_date = st.sidebar.date_input("End Date", today)
    
    # Forecasting parameters
    st.sidebar.header("Forecasting Parameters")
    forecast_days = st.sidebar.slider("Forecast Days", 7, 365, 30)
    
    # Model selection
    model_option = st.sidebar.selectbox(
        "Forecasting Model",
        ["Prophet", "LSTM", "Both"]
    )
    
    # Load data button
    if st.sidebar.button("Load Data and Forecast"):
        # Load stock data
        with st.spinner("Loading stock data..."):
            data = load_stock_data(ticker, start_date, end_date)
        
        if data is not None and not data.empty:
            # Display success message
            st.success(f"Successfully loaded data for {ticker}!")
            
            # Display data overview
            st.header("Data Overview")
            st.dataframe(data.head())
            
            # Display basic statistics
            st.subheader("Basic Statistics")
            st.dataframe(data.describe())
            
            # Plot stock data
            st.header("Stock Price History")
            fig = plot_stock_data(data, title=f"{ticker} Stock Price History")
            st.pyplot(fig)
            
            # Forecasting section
            st.header("Forecasting Results")
            
            # Run selected models
            prophet_results = None
            lstm_results = None
            
            if model_option in ["Prophet", "Both"]:
                with st.spinner("Running Prophet model..."):
                    st.subheader("Prophet Model Forecast")
                    prophet_model, prophet_forecast = create_prophet_model(data, forecast_period=forecast_days)
                    fig_components, fig_forecast = plot_prophet_forecast(prophet_model, prophet_forecast, data)
                    
                    st.pyplot(fig_forecast)
                    st.pyplot(fig_components)
                    prophet_results = prophet_forecast
            
            if model_option in ["LSTM", "Both"]:
                with st.spinner("Running LSTM model..."):
                    st.subheader("LSTM Model Forecast")
                    sequence_length = 60  # Number of days to look back
                    lstm_model, predictions, future_predictions, scaler = create_lstm_model(
                        data, 
                        target_column='Close', 
                        sequence_length=sequence_length,
                        forecast_days=forecast_days
                    )
                    
                    fig_lstm = plot_lstm_results(
                        data, 
                        predictions, 
                        future_predictions, 
                        sequence_length
                    )
                    st.pyplot(fig_lstm)
                    
                    # Create future dates for LSTM predictions
                    last_date = data.index[-1]
                    future_dates = pd.date_range(
                        start=last_date + pd.Timedelta(days=1), 
                        periods=len(future_predictions)
                    )
                    
                    lstm_results = (predictions, future_predictions, future_dates)
            
            # Interactive comparison plot
            if model_option == "Both":
                st.header("Model Comparison")
                fig_interactive = create_interactive_plot(data, prophet_forecast, lstm_results)
                st.plotly_chart(fig_interactive, use_container_width=True)
            
            # Stock analysis insights
            st.header("Stock Analysis Insights")
            
            # Calculate moving averages
            data['MA50'] = data['Close'].rolling(window=50).mean()
            data['MA200'] = data['Close'].rolling(window=200).mean()
            
            # Plot moving averages
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(data.index, data['Close'], label='Close Price')
            ax.plot(data.index, data['MA50'], label='50-day MA')
            ax.plot(data.index, data['MA200'], label='200-day MA')
            ax.set_title(f"{ticker} Stock Price with Moving Averages")
            ax.set_xlabel('Date')
            ax.set_ylabel('Price')
            ax.grid(True)
            ax.legend()
            st.pyplot(fig)
            
            # Calculate volatility
            data['Daily Return'] = data['Close'].pct_change()
            volatility = data['Daily Return'].std() * (252 ** 0.5)  # Annualized volatility
            
            # Display volatility
            st.subheader("Volatility Analysis")
            st.write(f"Annualized Volatility: {volatility:.2%}")
            
            # Plot daily returns
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(data.index, data['Daily Return'], label='Daily Returns')
            ax.set_title(f"{ticker} Daily Returns")
            ax.set_xlabel('Date')
            ax.set_ylabel('Return')
            ax.grid(True)
            ax.legend()
            st.pyplot(fig)
            
            # Display correlation matrix for OHLC data
            st.subheader("Correlation Matrix")
            corr = data[['Open', 'High', 'Low', 'Close', 'Volume']].corr()
            fig, ax = plt.subplots(figsize=(10, 8))
            sns.heatmap(corr, annot=True, cmap='coolwarm', ax=ax)
            st.pyplot(fig)
            
        else:
            st.error(f"Failed to load data for {ticker}. Please check the ticker symbol and try again.")

if __name__ == "__main__":
    main()
```

```text name=requirements.txt
pandas
numpy
matplotlib
seaborn
plotly
scikit-learn
statsmodels
yfinance
prophet
tensorflow
streamlit
```

````markdown name=README.md
# Stock Market Analysis & Forecasting

This application allows you to analyze and forecast stock market trends using time series analysis techniques.

## Features

- Fetch historical stock data from Yahoo Finance
- Visualize stock price history with various indicators
- Forecast future prices using:
  - Facebook Prophet model
  - LSTM (Long Short-Term Memory) neural network
- Interactive comparison of different forecasting models
- Technical analysis with moving averages
- Volatility analysis
- Correlation analysis of stock metrics

## Installation

1. Clone this repository:
```bash
git clone https://github.com/yourusername/stock-market-forecasting.git
cd stock-market-forecasting
```

2. Create a virtual environment (optional but recommended):
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install the required packages:
```bash
pip install -r requirements.txt
```

## Usage

1. Run the Streamlit application:
```bash
streamlit run app.py
```

2. Open your web browser and go to http://localhost:8501

3. Enter a stock symbol (e.g., AAPL for Apple), select date range and forecasting model

4. Click "Load Data and Forecast" to generate analysis and predictions

## Project Structure

- `app.py`: Main Streamlit application
- `data_loader.py`: Functions to fetch data from Yahoo Finance
- `models.py`: Time series models (Prophet, LSTM)
- `visualization.py`: Data visualization functions

## Technologies Used

- Python
- Pandas, NumPy for data manipulation
- Matplotlib, Seaborn, Plotly for visualization
- Scikit-learn, Statsmodels for analysis
- Facebook Prophet for time series forecasting
- TensorFlow/Keras for LSTM neural networks
- Streamlit for the web interface
- Yahoo Finance API for stock data

## Notes

- LSTM model training may take some time depending on your hardware
- For better forecasting results, use at least 2-3 years of historical data
````

## Running the Application

1. Save all the files in a project folder
2. Install dependencies:
```
pip install -r requirements.txt
```
3. Run the application:
```
streamlit run app.py
```

This application provides:
- Historical stock data visualization from Yahoo Finance
- Two forecasting models (Prophet and LSTM)
- Technical analysis with moving averages and volatility metrics
- Interactive charts for better visualization
- Comparative analysis between different forecasting models

The Streamlit interface makes it easy to select different stocks, time periods, and forecasting horizons without needing to modify the code. The application is also responsive and should work well on different screen sizes.